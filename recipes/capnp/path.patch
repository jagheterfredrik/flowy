--- a/c++/src/kj/filesystem-disk-unix.c++
+++ b/c++/src/kj/filesystem-disk-unix.c++
@@ -1661,26 +1661,9 @@ public:
 class DiskFilesystem final: public Filesystem {
 public:
   DiskFilesystem()
-      : root(openDir("/")),
-        current(openDir(".")),
+      : root(openDir("/data/data/ai.flow.android/files/app")),
+        current(openDir("/data/data/ai.flow.android/files/app")),
         currentPath(computeCurrentPath()) {
-    // We sometimes like to use qemu-user to test arm64 binaries cross-compiled from an x64 host
-    // machine. But, because it intercepts and rewrites system calls from userspace rather than
-    // emulating a whole kernel, it has a lot of quirks. One quirk that hits kj::Filesystem pretty
-    // badly is that open("/") actually returns a file descriptor for "/usr/aarch64-linux-gnu".
-    // Attempts to openat() any files within there then don't work. We can detect this problem and
-    // correct for it here.
-    struct stat realRoot, fsRoot;
-    KJ_SYSCALL_HANDLE_ERRORS(stat("/dev/..", &realRoot)) {
-      default:
-        // stat("/dev/..") failed? Give up.
-        return;
-    }
-    KJ_SYSCALL(fstat(root.DiskHandle::getFd(), &fsRoot));
-    if (realRoot.st_ino != fsRoot.st_ino) {
-      KJ_LOG(WARNING, "root dir file descriptor is broken, probably because of qemu; compensating");
-      root.setFd(openDir("/dev/.."));
-    }
   }
 
   const Directory& getRoot() const override {
@@ -1711,53 +1694,8 @@ private:
   }
 
   static Path computeCurrentPath() {
-    // If env var PWD is set and points to the current directory, use it. This captures the current
-    // path according to the user's shell, which may differ from the kernel's idea in the presence
-    // of symlinks.
-    const char* pwd = getenv("PWD");
-    if (pwd != nullptr) {
-      Path result = nullptr;
-      struct stat pwdStat, dotStat;
-      KJ_IF_MAYBE(e, kj::runCatchingExceptions([&]() {
-        KJ_ASSERT(pwd[0] == '/') { return; }
-        result = Path::parse(pwd + 1);
-        KJ_SYSCALL(lstat(result.toString(true).cStr(), &pwdStat), result) { return; }
-        KJ_SYSCALL(lstat(".", &dotStat)) { return; }
-      })) {
-        // failed, give up on PWD
-        KJ_LOG(WARNING, "PWD environment variable seems invalid", pwd, *e);
-      } else {
-        if (pwdStat.st_ino == dotStat.st_ino &&
-            pwdStat.st_dev == dotStat.st_dev) {
-          return kj::mv(result);
-        } else {
-          KJ_LOG(WARNING, "PWD environment variable doesn't match current directory", pwd);
-        }
-      }
-    }
-
-    size_t size = 256;
-  retry:
-    KJ_STACK_ARRAY(char, buf, size, 256, 4096);
-    if (getcwd(buf.begin(), size) == nullptr) {
-      int error = errno;
-      if (error == ERANGE) {
-        size *= 2;
-        goto retry;
-      } else {
-        KJ_FAIL_SYSCALL("getcwd()", error);
-      }
-    }
-
-    StringPtr path = buf.begin();
-
-    // On Linux, the path will start with "(unreachable)" if the working directory is not a subdir
-    // of the root directory, which is possible via chroot() or mount namespaces.
-    KJ_ASSERT(!path.startsWith("(unreachable)"),
-        "working directory is not reachable from root", path);
-    KJ_ASSERT(path.startsWith("/"), "current directory is not absolute", path);
-
-    return Path::parse(path.slice(1));
+    const char* pwd = "/";
+    return Path::parse(pwd + 1);
   }
 };
 
